//generating an object with literal notation//var myObj = {};//generating an objection with the object constructor//var emptyObj = new Object();//myObj["name"] = "Charlie";//myObj.name = "Charlie";//give contents and property to the objectvar friends ={};friends.bill ={    firstName:"Bill",    lastName:"Gates",    number:"(206) 555-5555",    address:['One Microsoft Way', 'Redmond', 'WA','98052']};friends.steve ={    firstName:"Steve",    lastName:"Jobs",    number:"(406) 555-5555",    address:['1 Infinite Loop', 'Cupertino', 'CA','95014']};var list = function(obj){    for(var prop in obj){        console.log(prop);    }};var search = function(name){    for (var prop in friends){        if (friends[prop].firstName ===name){        console.log(firnds[prop]);        return friens[prop];        }    }};list(friends);search("Steve");//You can add objects directly to friends, like this://var friends = {//    bill: {},//    steve: {}//};//Or with the bracket ([]) or dot(.) notation, like this://friends[bill] = {};//friends.steve = {};//Or with Object constructors, like this://var friends = new Object();//friends.bill = new Object();//friends.steve = new Object();//Notice that "bill" and "steve" are not capitalized!//for (var key in object) {  // Access that key's value  // with object[key]//}//The "key" bit can be any placeholder name you like. It's sort of like when you put a placeholder parameter name in a function that takes arguments.